syntax = "proto3";

package plc.interface;
option csharp_namespace = "PlcSimAdvanced.Protos";

import "Protos/types.proto";
import "google/protobuf/timestamp.proto";

/* Request for a GetVersion rpc call */
message GetVersionRequest {
  
}

/* Response data for a GetVersion rpc call */
message GetVersionResponse {
  uint32 major_version = 1;
  uint32 minor_version = 2;
  bool valid = 3;
}

/* Request data for a ShutdownRequest rpc call */
message ShutdownRequest {
  
}

/* Response data for a ShutdownRequest rpc call */
message ShutdownResponse {
  
}

/* Request data for a GetInstancesRequest rpc call */
message GetInstancesRequest {
  
}

/* Response data for a GetInstancesRequest rpc call */
message GetInstancesResponse {
  repeated InstanceInfo instances = 1;
}

/*  */
message RegisterInstanceRequest {
  string name = 1;
}

/*  */
message RegisterInstanceResponse {
  InstanceInfo instance = 1;
}

message GetPlcInformationRequest {
    InstanceInfoRequest instance = 1;
}

message GetPlcInformationResponse {
  string cpu_type = 1;
  string communication_interface = 2;
  string controller_name = 3;
  string controller_short_designation = 4;
  string controller_ip = 5;
  repeated SiemensIp controller_ip_suites = 6;
  string storage_path = 7;
  string operating_state = 8;
  google.protobuf.Timestamp controller_time = 9;
  double controller_timescale = 10;
  string operating_mode = 11;
  bool is_send_sync_event_in_default_mode_enabled = 12;
  int64 overwritten_minimal_cycle_time = 13;
}

/* Service that is used to interact with a PLCSim plc */
service PlcSimAdvancedService
{
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse);
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
  rpc GetRegisteredInstances(GetInstancesRequest) returns (GetInstancesResponse);
  rpc RegisterInstance(RegisterInstanceRequest) returns (RegisterInstanceResponse);
  rpc GetPlcInformation(GetPlcInformationRequest) returns (GetPlcInformationResponse);
}
